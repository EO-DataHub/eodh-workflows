[project]
name = 'eodh-workflows'
description = 'Workflows for EO DataHub platform.'
version = '0.0.1'
requires-python = '>=3.12,<3.13'
authors = [
    { name = 'Spyrosoft' }
]
license = { text = "BSD-3-Clause" }
classifiers = [
    'Development Status :: 3 - Alpha',
    'Environment :: Console',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.11',
    'Intended Audience :: Developers',
    'Intended Audience :: Information Technology',
    'Intended Audience :: System Administrators',
    'Operating System :: POSIX :: Linux',
    'Topic :: Software Development :: Libraries :: Python Modules',
]
dependencies = [
    "click>=8.1.8",
    "dask-geopandas>=0.4.2",
    "dask[complete]>=2024.8.0",
    "datashader>=0.17.0",
    "fsspec>=2025.7.0",
    "gdal[numpy]==3.4.1",
    "geopandas>=1.0.1",
    "matplotlib>=3.9.4",
    "mlflow>=3.1.4",
    "oauthlib>=3.3.1",
    "pandas>=2.3.1",
    "planetary-computer>=1.0.0",
    "pyarrow>=20.0.0",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "pystac-client>=0.8.3",
    "python-dotenv>=1.1.1",
    "pyyaml>=6.0.2",
    "rasterio>=1.4.3",
    "rechunker>=0.5.4",
    "requests-oauthlib>=2.0.0",
    "retry>=0.9.2",
    "rio-cogeo>=5.4.2",
    "rio-tiler>=7.8.1",
    "rioxarray>=0.15.0",
    "scikit-image>=0.24.0",
    "scikit-learn>=1.6.1",
    "shapely>=2.0.7",
    "stac-geoparquet>=0.7.0",
    "stac-vrt>=1.0.3",
    "stackstac>=0.5.1",
    "tqdm>=4.67.1",
    "typing-extensions>=4.14.1",
    "xarray>=2024.7.0",
    "xarray-spatial>=0.4.0",
    "xarrayutils>=2.0.1",
]

[dependency-groups]
dev = [
    "coverage>=7.10.1",
    "gha-update>=0.2.0",
    "interrogate>=1.7.0",
    "mock>=5.2.0",
    "mypy>=1.17.1",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-pretty>=1.3.0",
    "ruff>=0.12.7",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-glightbox>=0.4.0",
    "mkdocs-material>=9.6.16",
    "mkdocstrings[python]>=0.30.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.urls]
Homepage = 'https://github.com/EO-DataHub/eodh-workflows'

[project.scripts]
eodh = "eodh_workflows.workflows.entrypoint:cli"
eopro = "eodh_workflows.workflows.eopro_entrypoint:cli"

[tool.ruff]
show-fixes = true
target-version = "py312"
line-length = 120
extend-exclude = [
    "docs/*",
    "data/*",
    "logs/*",
    "mlruns/*",
]

[tool.ruff.lint]
select = [
    "D", # see: https://pypi.org/project/pydocstyle
    "F", # see: https://pypi.org/project/Pyflakes
    "E", "W", # see: https://pypi.org/project/pycodestyle
    "C90", # see: https://pypi.org/project/mccabe
    "I", # see: https://pypi.org/project/isort
    "N", # see: https://pypi.org/project/pep8-naming
    "UP", # see: https://pypi.org/project/pyupgrade
    "YTT", # see: https://pypi.org/project/flake8-2020
    "ANN", # see: https://pypi.org/project/flake8-annotations
    "ASYNC", # see: https://pypi.org/project/flake8-async
    "ASYNC1", # see: https://pypi.org/project/flake8-trio
    "S", # see: https://pypi.org/project/flake8-bandit
    "BLE", # see: https://pypi.org/project/flake8-blind-except
    "FBT", # see: https://pypi.org/project/flake8-boolean-trap
    "B", # see: https://pypi.org/project/flake8-bugbear
    "A", # see: https://pypi.org/project/flake8-builtins
    "C4", # see: https://pypi.org/project/flake8-comprehensions
    "DTZ", # see: https://pypi.org/project/flake8-datetimez
    "T10", # see: https://pypi.org/project/flake8-debugger
    "EM", # see: https://pypi.org/project/flake8-errmsg
    "EXE", # see: https://pypi.org/project/flake8-executable
    "FA", # see: https://pypi.org/project/flake8-future-annotations
    "ICN", # see: https://pypi.org/project/flake8-import-conventions
    "G", # see: https://pypi.org/project/flake8-logging-format
    "INP", # see: https://pypi.org/project/flake8-no-pep420
    "PIE", # see: https://pypi.org/project/flake8-pie
    "T20", # see: https://pypi.org/project/flake8-print
    "PYI", # see: https://pypi.org/project/flake8-pyi
    "PT", # see: https://pypi.org/project/flake8-pytest-style
    "Q", # see: https://pypi.org/project/flake8-quotes
    "RSE", # see: https://pypi.org/project/flake8-raise
    "RET", # see: https://pypi.org/project/flake8-return
    "SLF", # see: https://pypi.org/project/flake8-self
    "SLOT", # see: https://pypi.org/project/flake8-slots
    "SIM", # see: https://pypi.org/project/flake8-simplify
    "TID", # see: https://pypi.org/project/flake8-tidy-imports
    "TCH", # see: https://pypi.org/project/flake8-type-checking
    "INT", # see: https://pypi.org/project/flake8-gettext
    "ARG", # see: https://pypi.org/project/flake8-unused-arguments
    "PTH", # see: https://pypi.org/project/flake8-use-pathlib
    "ERA", # see: https://pypi.org/project/eradicate
    "PD", # see: https://pypi.org/project/pandas-vet
    "PGH", # see: https://pypi.org/project/pygrep-hooks
    "PL", # see: https://pypi.org/project/Pylint
    "TRY", # see: https://pypi.org/project/tryceratops
    "FLY", # see: https://pypi.org/project/flynt
    "NPY", # see: https://pypi.org/project/NumPy-specific rules
    "AIR", # see: https://pypi.org/project/Airflow
    "PERF", # see: https://pypi.org/project/Perflint
    "FURB", # see: https://pypi.org/project/refurb
    "LOG", # see: https://pypi.org/project/flake8-logging
    "RUF", # Ruff-specific rules
]
ignore = [
    "ANN401", # see: https://pypi.org/project/flake8-annotations - Dynamically typed expressions (typing.Any) are disallowed
    "D1", # see: https://pypi.org/project/pydocstyle - D1 - undocumented public member - too restrictive
    "COM", # see: https://pypi.org/project/flake8-commas - conflicts with formatter
    "ISC", # see: https://pypi.org/project/flake8-implicit-str-concat - conflicts with formatter
    "CPY", # see: https://pypi.org/project/flake8-copyright - not used
    "DJ", # see: https://pypi.org/project/flake8-django - not used
    "TD", # see: https://pypi.org/project/flake8-todos - too restrictive
    "FIX", # see: https://pypi.org/project/flake8-fixme - too restrictive
    "PLR0913", # see: https://pypi.org/project/Pylint - Too many arguments in function definition
    "PLR0917", # see: https://pypi.org/project/Pylint - Too many positional arguments
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
"**/{tests}/*" = ["S101"]  # Allow "use of assert detected" in tests
"src/eodh_workflows/utils/gpu.py" = ["S605"]
"src/eodh_workflows/consts/logging.py" = ["A005"]
"src/eodh_workflows/utils/logging.py" = ["A005"]
"src/eodh_workflows/workflows/lulc/generate_change.py" = ["PLR0914"]
"src/eodh_workflows/workflows/raster/calculator.py" = ["PLR0914"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = "--ignore data --ignore notebooks --ignore build_tools --ignore examples --ignore docs --ignore cwl_files"
asyncio_mode = "auto"
markers = [
    "unit: mark a test as a unit test.",
    "integration: mark test as an integration test.",
    "e2e: mark test as an end to end test.",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.check-manifest]
ignore = [
    ".binder/**",
    ".all-contributorsrc",
    ".coveragerc",
    "examples/**",
    "build_tools/**",
    "__check_build/**",
    "docs/**",
    "Makefile",
    "CODEOWNERS",
    "CONTRIBUTING.md",
    "*.yaml",
    "*.yml"
]

[tool.mypy]
exclude = [
    'venv',
    '\.venv',
    '\.git',
    '__pycache__',
    'configs',
    'data',
    'logs',
    'outputs',
    'models',
]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unused_configs = true
plugins = "numpy.typing.mypy_plugin"

[[tool.mypy.overrides]]
module = [
    "affine.*",
    "dask.*",
    "distributed.*",
    "geopandas.*",
    "matplotlib.*",
    "mkdocs_gen_files.*",
    "pandas.*",
    "osgeo.*",
    "planetary_computer.*",
    "pydantic.*",
    "pydantic_settings.*",
    "pyproj.*",
    "pystac.*",
    "pystac_client.*",
    "rasterio.*",
    "rioxarray.*",
    "shapely.*",
    "skimage.*",
    "stackstac.*",
    "xarray.*",
    "xrspatial.*",
]
ignore_missing_imports = true
ignore_errors = true

[tool.interrogate]
ignore-init-module = true
ignore_init_method = true
exclude = ["tests", "docs", "site", "cwl_files"]
omit-covered-files = true

[tool.coverage.run]
source = ['src']
branch = true
omit = ["tests/*"]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if typing.TYPE_CHECKING:',
    'if TYPE_CHECKING:',
    "if t.TYPE_CHECKING:",
    "return NotImplemented",
    "except KeyboardInterrupt as exc",
    "except ImportError:",
    '@overload',
]

[tool.docformatter]
recursive = true
wrap-summaries = 120
wrap-descriptions = 120
blank = true
