{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"eodh-workflows","text":"<p>Workflows for EO DataHub platform.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Create the environment:</p> <pre><code>make env\n</code></pre> <p>Run <code>pre-commit</code> hooks:</p> <pre><code>make pc\n</code></pre>"},{"location":"#guides","title":"Guides","text":"<p>Read more here:</p> <ul> <li>Development env setup</li> <li>Contributing</li> <li>Makefile usage</li> <li>Running tests</li> </ul>"},{"location":"#docs","title":"Docs","text":"<p>To build project documentation run:</p> <pre><code>make docs\n</code></pre> <p>and then:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"api_ref/consts/","title":"src.consts","text":"<p>The constants to be used across the project.</p>"},{"location":"api_ref/utils/","title":"src.utils","text":""},{"location":"api_ref/utils/#gpu","title":"GPU","text":"<p>The GPU utilities.</p>"},{"location":"api_ref/utils/#src.utils.gpu.set_gpu_power_limit_if_needed","title":"<code>src.utils.gpu.set_gpu_power_limit_if_needed</code>","text":"<p>Helper function, that sets GPU power limit if specified GPU is used.</p> <p>Parameters:</p> Name Type Description Default <code>gpu_name</code> <code>str</code> <p>The name of the GPU to assign the new power limit to. Default: \"NVIDIA GeForce RTX 3090\".</p> <code>'NVIDIA GeForce RTX 3090'</code> <code>pw</code> <code>int</code> <p>The new power limit to set. Defaults to 250W.</p> <code>250</code> Source code in <code>src/utils/gpu.py</code> <pre><code>def set_gpu_power_limit_if_needed(gpu_name: str = \"NVIDIA GeForce RTX 3090\", pw: int = 250) -&gt; None:\n    \"\"\"Helper function, that sets GPU power limit if specified GPU is used.\n\n    Args:\n        gpu_name: The name of the GPU to assign the new power limit to. Default: \"NVIDIA GeForce RTX 3090\".\n        pw: The new power limit to set. Defaults to 250W.\n\n    \"\"\"\n    gpu_list = os.popen(\"/usr/bin/nvidia-smi --query-gpu=gpu_name --format=csv\").read()\n    if gpu_name in gpu_list:\n        os.system(\"/usr/bin/sudo /usr/bin/nvidia-smi -pm 1\")\n        os.system(f\"/usr/bin/sudo /usr/bin/nvidia-smi -pl {pw}\")\n</code></pre>"},{"location":"api_ref/utils/#logging","title":"Logging","text":"<p>The logging utilities.</p>"},{"location":"api_ref/utils/#src.utils.logging.get_logger","title":"<code>src.utils.logging.get_logger</code>","text":"<p>Builds a <code>Logger</code> instance with provided name and log level.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name for the logger.</p> required <code>log_level</code> <code>int | str</code> <p>The default log level.</p> <code>INFO</code> <p>Returns:</p> Type Description <code>Logger</code> <p>The logger.</p> Source code in <code>src/utils/logging.py</code> <pre><code>def get_logger(name: str, log_level: int | str = logging.INFO) -&gt; logging.Logger:\n    \"\"\"Builds a `Logger` instance with provided name and log level.\n\n    Args:\n        name: The name for the logger.\n        log_level: The default log level.\n\n    Returns:\n        The logger.\n\n    \"\"\"\n    logger = logging.getLogger(name=name)\n    logger.setLevel(log_level)\n\n    stream_handler = logging.StreamHandler()\n    formatter = logging.Formatter(fmt=consts.logging.FORMAT)\n    stream_handler.setFormatter(fmt=formatter)\n    logger.addHandler(stream_handler)\n\n    return logger\n</code></pre>"},{"location":"api_ref/utils/#src.utils.logging.timed","title":"<code>src.utils.logging.timed</code>","text":"<p>This decorator prints the execution time for the decorated function.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable[P, T]</code> <p>The function to wrap.</p> required <p>Returns:</p> Type Description <code>Callable[P, T]</code> <p>Wrapper around the function.</p> Source code in <code>src/utils/logging.py</code> <pre><code>def timed(func: Callable[P, T]) -&gt; Callable[P, T]:\n    \"\"\"This decorator prints the execution time for the decorated function.\n\n    Args:\n        func: The function to wrap.\n\n    Returns:\n        Wrapper around the function.\n\n    \"\"\"\n\n    @wraps(func)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -&gt; T:\n        _timed_logger.info(\"%(func_name)s is running...\", {\"func_name\": func.__qualname__})\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        _timed_logger.info(\n            \"%(func_name)s ran in %(execution_time)s\",\n            {\n                \"func_name\": func.__qualname__,\n                \"execution_time\": f\"{(end - start):.4f}\",\n            },\n        )\n        return result\n\n    return wrapper\n</code></pre>"},{"location":"api_ref/utils/#mlflow","title":"MLFlow","text":"<p>The MLFlow utilities.</p>"},{"location":"api_ref/utils/#src.utils.mlflow.resolve_experiment_name","title":"<code>src.utils.mlflow.resolve_experiment_name</code>","text":"<p>Resolves MLFlow experiment name.</p> <p>If environment variable <code>\"MLFLOW_EXPERIMENT_NAME\"</code> is set, then the experiment name will be resolved based on this environment variable. Otherwise, the default experiment name, passed as and argument will be used.</p> <p>Useful when working with Azure ML.</p> Notes <p>This function will set the environment variable <code>\"MLFLOW_EXPERIMENT_NAME\"</code> if it is not set.</p> <p>Parameters:</p> Name Type Description Default <code>default_experiment_name</code> <code>str</code> <p>The default experiment name to use if environment variable is not set.</p> required <p>Examples:</p> <p>When env variable is unset, the default exp name passed as argument will be used.</p> <pre><code>&gt;&gt;&gt; del os.environ[\"MLFLOW_EXPERIMENT_NAME\"]\n&gt;&gt;&gt; resolve_experiment_name(\"custom-mlflow-experiment-name\")\n'custom-mlflow-experiment-name'\n</code></pre> <p>Otherwise, the default exp name indicated by the env var will be used.</p> <pre><code>&gt;&gt;&gt; os.environ[\"MLFLOW_EXPERIMENT_NAME\"] = \"env-defined-mlflow-experiment-name\"\n&gt;&gt;&gt; resolve_experiment_name(\"different-mlflow-experiment-name\")\n'env-defined-mlflow-experiment-name'\n</code></pre> Source code in <code>src/utils/mlflow.py</code> <pre><code>def resolve_experiment_name(default_experiment_name: str) -&gt; str:\n    \"\"\"Resolves MLFlow experiment name.\n\n    If environment variable `\"MLFLOW_EXPERIMENT_NAME\"` is set, then the experiment name\n    will be resolved based on this environment variable. Otherwise, the default experiment name, passed as\n    and argument will be used.\n\n    Useful when working with Azure ML.\n\n    Notes:\n        This function will set the environment variable `\"MLFLOW_EXPERIMENT_NAME\"` if it is not set.\n\n    Args:\n        default_experiment_name: The default experiment name to use if environment variable is not set.\n\n    Returns: The resolved experiment name.\n\n    Examples:\n        When env variable is unset, the default exp name passed as argument will be used.\n\n        &gt;&gt;&gt; del os.environ[\"MLFLOW_EXPERIMENT_NAME\"]\n        &gt;&gt;&gt; resolve_experiment_name(\"custom-mlflow-experiment-name\")\n        'custom-mlflow-experiment-name'\n\n        Otherwise, the default exp name indicated by the env var will be used.\n\n        &gt;&gt;&gt; os.environ[\"MLFLOW_EXPERIMENT_NAME\"] = \"env-defined-mlflow-experiment-name\"\n        &gt;&gt;&gt; resolve_experiment_name(\"different-mlflow-experiment-name\")\n        'env-defined-mlflow-experiment-name'\n\n    \"\"\"\n    if os.environ.get(\"MLFLOW_EXPERIMENT_NAME\", None) is None:\n        os.environ[\"MLFLOW_EXPERIMENT_NAME\"] = default_experiment_name\n    return os.environ[\"MLFLOW_EXPERIMENT_NAME\"]\n</code></pre>"},{"location":"api_ref/utils/#src.utils.mlflow.run_id_from_context","title":"<code>src.utils.mlflow.run_id_from_context</code>","text":"<p>Resolves the MLFlow Run ID from the context.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>The MLFlow Run ID based on <code>\"MLFLOW_RUN_ID\"</code> environment variable. If not set, returns <code>None</code>.</p> Source code in <code>src/utils/mlflow.py</code> <pre><code>def run_id_from_context() -&gt; str | None:\n    \"\"\"Resolves the MLFlow Run ID from the context.\n\n    Returns:\n        The MLFlow Run ID based on `\"MLFLOW_RUN_ID\"` environment variable. If not set, returns `None`.\n\n    \"\"\"\n    return os.environ.get(\"MLFLOW_RUN_ID\", None)\n</code></pre>"},{"location":"api_ref/utils/#serialization","title":"Serialization","text":"<p>The serialization utils.</p>"},{"location":"api_ref/utils/#src.utils.serialization.JsonEncoder","title":"<code>src.utils.serialization.JsonEncoder</code>","text":"<p>               Bases: <code>JSONEncoder</code></p> <p>Custom JSON encoder that handles datatypes that are not out-of-the-box supported by the <code>json</code> package.</p> Source code in <code>src/utils/serialization.py</code> <pre><code>class JsonEncoder(JSONEncoder):\n    \"\"\"Custom JSON encoder that handles datatypes that are not out-of-the-box supported by the `json` package.\"\"\"\n\n    def default(self, o: Any) -&gt; str:\n        if isinstance(o, (date, datetime)):\n            return o.isoformat()\n\n        if isinstance(o, Path):\n            return o.as_posix()\n\n        return super().default(o)  # type: ignore[no-any-return]\n</code></pre>"},{"location":"api_ref/core/configs/","title":"configs","text":"<p>The base classes for step entrypoint configs.</p>"},{"location":"api_ref/core/configs/#base-classes","title":"Base classes","text":"<p>The base classes for step entrypoint configs.</p>"},{"location":"api_ref/core/configs/#src.core.configs.base.ConfigBase","title":"<code>src.core.configs.base.ConfigBase</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A base class for all entrypoint config classes.</p> Source code in <code>src/core/configs/base.py</code> <pre><code>class ConfigBase(BaseModel):\n    \"\"\"A base class for all entrypoint config classes.\"\"\"\n\n    def __str__(self) -&gt; str:\n        return self.model_dump_json(indent=4)  # type: ignore[no-any-return]\n</code></pre>"},{"location":"api_ref/core/configs/#argument-parsing","title":"Argument parsing","text":"<p>The argument parsing helper functions for the script entrypoint arguments.</p>"},{"location":"api_ref/core/configs/#src.core.configs.argument_parsing.parse_args","title":"<code>src.core.configs.argument_parsing.parse_args</code>","text":"<p>Parses Command Line arguments and returns the script config model.</p> <p>Parameters:</p> Name Type Description Default <code>parser</code> <code>ArgumentParser</code> <p>The instance of :class:<code>argparse.ArgumentParser</code> to use.</p> required <code>cfg_cls</code> <code>type[T]</code> <p>The class of the config to use. Anything inheriting from :class:<code>src.core.configs.base.ConfigBase</code> will work.</p> required <p>Returns:</p> Type Description <code>T</code> <p>A config instance of type given by <code>cfg_cls</code>.</p> Source code in <code>src/core/configs/argument_parsing.py</code> <pre><code>def parse_args(parser: argparse.ArgumentParser, cfg_cls: type[T]) -&gt; T:\n    \"\"\"Parses Command Line arguments and returns the script config model.\n\n    Args:\n        parser: The instance of :class:`argparse.ArgumentParser` to use.\n        cfg_cls: The class of the config to use.\n            Anything inheriting from :class:`src.core.configs.base.ConfigBase` will work.\n\n    Returns:\n         A config instance of type given by `cfg_cls`.\n\n    \"\"\"\n    known_args, unknown_args = parser.parse_known_args()\n    _logger.info(\"Unknown args: %(unknown_args)s\", {\"unknown_args\": unknown_args})\n    cfg = cfg_cls(**vars(known_args))\n    _logger.info(\"Running with following config: %(cfg)s\", {\"cfg\": cfg})\n    return cfg\n</code></pre>"},{"location":"api_ref/core/settings/","title":"settings","text":"<p>The application settings.</p>"},{"location":"api_ref/core/settings/#src.core.settings.Settings","title":"<code>src.core.settings.Settings</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Represents Application Settings with nested configuration sections.</p> Source code in <code>src/core/settings.py</code> <pre><code>class Settings(BaseSettings):\n    \"\"\"Represents Application Settings with nested configuration sections.\"\"\"\n\n    environment: str = \"local\"\n    sentinel_hub: SentinelHubSettings\n    eodh: EODHSettings\n\n    model_config = SettingsConfigDict(\n        env_file=consts.directories.ROOT_DIR / \".env\",\n        env_file_encoding=\"utf-8\",\n        env_nested_delimiter=\"__\",\n        extra=\"ignore\",\n    )\n</code></pre>"},{"location":"api_ref/core/settings/#importing-settings","title":"Importing settings","text":"<p>To use current settings without the need to parse them each time you can use:</p> <pre><code>import logging\n\nfrom src.core.settings import current_settings\n\n\n# log current environment\nlogging.info(current_settings.env)  # INFO:dev\n</code></pre>"},{"location":"guides/contributing/","title":"Contributing","text":"<p>This page explains the coding style and general contributing guidelines for the dev team.</p>"},{"location":"guides/contributing/#instructions","title":"Instructions","text":"<p>There are a couple of rules that you should follow:</p> <ol> <li>Use <code>logging</code> module instead of <code>print()</code> function</li> <li>Try not to leave commended out code</li> <li>If certain functionality is needed in multiple places - please create a separate module or a class for it and import it in your code.</li> <li>Use notebooks only for quick experimentation, they should not be the source of our production code.</li> <li>Set a guide in your IDE to 120 characters. We use 120 instead of suggested 79 from the PEP8 Guidelines.</li> <li>We use <code>mypy</code> to guard the type annotations.</li> <li>We use <code>ruff</code> to maintain PEP8 compliant code.</li> <li>We use google style for the docstrings.</li> <li>Code review should be done for every PR.</li> <li>We do not merge directly to main branch.</li> <li>Always start from main branch when branching to new feature branch.</li> <li>We require at least one approve on each PR and all threads to be resolved before the merge.</li> <li>When merging we use squash before merge to have clean history</li> </ol>"},{"location":"guides/makefile-usage/","title":"Using Makefile commands","text":"<p>In order to use the Makefile commands you need to be on Linux.</p>"},{"location":"guides/makefile-usage/#basic-usage","title":"Basic usage","text":"<p>Makefile commands are easy to use. Just type <code>make</code> in your terminal, hit enter and see the list of available commands.</p> <pre><code>make\n</code></pre> <p>The command above is equivalent to running:</p> <pre><code>make help\n</code></pre>"},{"location":"guides/makefile-usage/#development-work-commands","title":"Development work commands","text":""},{"location":"guides/makefile-usage/#git-repo-initialization","title":"Git repo initialization","text":"<ul> <li> <p>git-init - Initializes Git repository</p> <pre><code>make git-init\n</code></pre> </li> </ul>"},{"location":"guides/makefile-usage/#freezing-project-dependencies","title":"Freezing project dependencies","text":"<ul> <li> <p>lock-file - Creates conda-lock file</p> <pre><code>make lock-file\n</code></pre> </li> <li> <p>release-lock-file - Creates conda-lock file without dev dependencies - to be used for deployment</p> <pre><code>make release-lock-file\n</code></pre> </li> </ul>"},{"location":"guides/makefile-usage/#creating-environments","title":"Creating environments","text":"<ul> <li> <p>conda-lock-install - Creates env from conda-lock file</p> <pre><code>make conda-lock-install\n</code></pre> </li> <li> <p>setup-pre-commit - Installs pre-commit hooks</p> <pre><code>make setup-pre-commit\n</code></pre> </li> <li> <p>setup-editable - Installs the project in an editable mode</p> <pre><code>make setup-editable\n</code></pre> </li> <li> <p>env - Creates local environment and installs pre-commit hooks</p> <pre><code>make env\n</code></pre> </li> <li> <p>remove-env - Removes current conda environment</p> <pre><code>make remove-env\n</code></pre> </li> <li> <p>recreate-env - Recreates conda environment by making new one from fresh lockfile</p> <pre><code>make recreate-env\n</code></pre> </li> </ul>"},{"location":"guides/makefile-usage/#project-initialization","title":"Project initialization","text":"<ul> <li> <p>init-project - Runs git init, lock-file creation and env setup - to be used after cookiecutter initialization</p> <pre><code>make init-project\n</code></pre> </li> </ul>"},{"location":"guides/makefile-usage/#helper-commands","title":"Helper commands","text":"<ul> <li> <p>format - Runs code formatting (<code>ruff</code>)</p> <pre><code>make format\n</code></pre> </li> <li> <p>type-check - Runs type checking with <code>mypy</code></p> <pre><code>make type-check\n</code></pre> </li> <li> <p>test - Runs pytest</p> <pre><code>make test\n</code></pre> </li> <li> <p>testcov - Runs tests and generates coverage reports</p> <pre><code>make testcov\n</code></pre> </li> <li> <p>mpc - Runs manual <code>pre-commit</code> stuff</p> <pre><code>make mpc\n</code></pre> </li> <li> <p>docs - Builds the documentation</p> <pre><code>make docs\n</code></pre> </li> <li> <p>pc - Runs <code>pre-commit</code> hooks</p> <pre><code>make pc\n</code></pre> </li> <li> <p>clean - Cleans artifacts</p> <pre><code>make clean\n</code></pre> </li> </ul>"},{"location":"guides/makefile-usage/#docker-commands","title":"Docker commands","text":"<ul> <li> <p>docker-all - Docker default target - builds image and runs Docker container</p> <pre><code>make docker-all\n</code></pre> </li> <li> <p>docker-build - Build Docker image</p> <pre><code>make docker-build\n</code></pre> </li> <li> <p>docker-run - Run Docker container</p> <pre><code>make docker-run\n</code></pre> </li> <li> <p>docker-stop - Stop Docker container</p> <pre><code>make docker-stop\n</code></pre> </li> <li> <p>docker-rm - Remove Docker container</p> <pre><code>make docker-rm\n</code></pre> </li> <li> <p>docker-rmi - Remove Docker image</p> <pre><code>make docker-rmi\n</code></pre> </li> <li> <p>docker-clean - Clean up everything (container and image)</p> <pre><code>make docker-clean\n</code></pre> </li> <li> <p>docker-rebuild - Rebuild and rerun Docker container</p> <pre><code>make docker-rebuild\n</code></pre> </li> </ul>"},{"location":"guides/setup-dev-env/","title":"Setting up dev environment","text":""},{"location":"guides/setup-dev-env/#requirements","title":"Requirements","text":"<p>In order to set up local development environment make sure you have installed:</p> <ul> <li>conda</li> <li>conda-lock</li> </ul> <p>You can install <code>conda-lock</code> on your <code>base</code> environment by running:</p> <pre><code>conda install -c conda-forge conda-lock -n base\n</code></pre> <p>You can use miniforge which also includes mamba. Using <code>mamba</code> should speed up dependency resolution significantly.</p>"},{"location":"guides/setup-dev-env/#using-makefile","title":"Using Makefile","text":"<p>Run:</p> <pre><code>make env\n</code></pre> <p>It will also install <code>pre-commit</code> hooks and the project in an editable mode. Once done you can activate the environment by running:</p> <pre><code>conda activate eodh-workflows\n</code></pre>"},{"location":"guides/setup-dev-env/#manually","title":"Manually","text":"<ol> <li> <p>Run <code>conda-lock</code> command:</p> <pre><code>conda-lock install --mamba -n eodh-workflows conda-lock.yml\n</code></pre> </li> <li> <p>Activate the env:</p> <pre><code>conda activate eodh-workflows\n</code></pre> </li> <li> <p>Install <code>pre-commit</code> hooks:</p> <pre><code>pre-commit install\n</code></pre> </li> <li> <p>Install the project in an editable mode:</p> <pre><code>pip install -e .\n</code></pre> </li> </ol>"},{"location":"guides/setup-dev-env/#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>This project uses <code>pre-commit</code> package for managing and maintaining <code>pre-commit</code> hooks.</p> <p>To ensure code quality - please make sure that you have it configured.</p> <ol> <li> <p>Install <code>pre-commit</code> and following packages: <code>ruff</code>, <code>mypy</code>, <code>pytest</code>.</p> </li> <li> <p>Install <code>pre-commit</code> hooks by running: <code>pre-commit install</code></p> </li> <li> <p>The command above will automatically run formatters, code checks and other steps defined in the <code>.pre-commit-config.yaml</code></p> </li> <li> <p>All of those checks will also be run whenever a new commit is being created i.e. when you run <code>git commit -m \"blah\"</code></p> </li> <li> <p>You can also run it manually with this command: <code>pre-commit run --all-files</code></p> </li> </ol> <p>You can manually disable <code>pre-commit</code> hooks by running: <code>pre-commit uninstall</code> Use this only in exceptional cases.</p>"},{"location":"guides/setup-dev-env/#setup-environmental-variables","title":"Setup environmental variables","text":"<p>Ask your colleagues for <code>.env</code> files which aren't included in this repository and put them inside the repo's root directory.</p> <p>To see what variables you need see the <code>.env-sample</code> file.</p>"},{"location":"guides/tests/","title":"Running tests","text":"<p>This page describes how to run tests locally using <code>pytest</code>.</p>"},{"location":"guides/tests/#instructions","title":"Instructions","text":"<p>To run tests marked as <code>unit</code> tests:</p> <pre><code>pytest -m \"unit\" -v\n</code></pre> <p>To run tests marked as <code>integration</code> tests:</p> <pre><code>pytest -m \"integration\" -v\n</code></pre> <p>To run tests marked as <code>e2e</code> tests:</p> <pre><code>pytest -m \"e2e\" -v\n</code></pre> <p>To run all tests:</p> <pre><code>pytest\n</code></pre> Note <p>Pre-commit hooks will only run those tests marked as <code>unit</code>.</p>"}]}